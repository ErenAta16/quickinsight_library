name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt -o bandit-report.txt || true
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true
    
    - name: Run OWASP security assessment
      run: |
        python run_security_assessment.py
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          *-report.json
          *-report.txt
          security_assessment_report.json
    
    - name: Comment PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## ðŸ”’ Security Scan Results\n\n';
          
          try {
            if (fs.existsSync('bandit-report.json')) {
              const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              const issues = banditReport.results || [];
              comment += `**Bandit Issues:** ${issues.length}\n`;
              
              if (issues.length > 0) {
                comment += '\n**High Severity Issues:**\n';
                const highIssues = issues.filter(i => i.issue_severity === 'HIGH');
                highIssues.slice(0, 5).forEach(issue => {
                  comment += `- ${issue.issue_text} (${issue.filename}:${issue.line_number})\n`;
                });
              }
            }
          } catch (e) {
            comment += 'Error reading security reports\n';
          }
          
          comment += '\nSee uploaded artifacts for full details.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
