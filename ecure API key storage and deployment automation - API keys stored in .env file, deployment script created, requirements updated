[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 67af5d6..fae3a32 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -129,29 +129,6 @@[m [mdmypy.json[m
 .pyre/[m
 [m
 # QuickInsights specific[m
[31m-.quickinsights_cache/[m
 quickinsights_output/[m
[31m-*.pkl[m
[31m-*.cache[m
[31m-[m
[31m-# IDE specific[m
[31m-.vscode/[m
[31m-.idea/[m
[31m-*.swp[m
[31m-*.swo[m
[31m-*~[m
[31m-[m
[31m-# OS specific[m
[31m-.DS_Store[m
[31m-.DS_Store?[m
[31m-._*[m
[31m-.Spotlight-V100[m
[31m-.Trashes[m
[31m-ehthumbs.db[m
[31m-Thumbs.db[m
[31m-[m
[31m-# Temporary files[m
[31m-*.tmp[m
[31m-*.temp[m
[31m-*.bak[m
[31m-*.backup[m
[32m+[m[32mtest_output/[m
[32m+[m[32m.benchmarks/[m
[1mdiff --git a/requirements-dev.txt b/requirements-dev.txt[m
[1mnew file mode 100644[m
[1mindex 0000000..a7ff9d1[m
[1m--- /dev/null[m
[1m+++ b/requirements-dev.txt[m
[36m@@ -0,0 +1,9 @@[m
[32m+[m[32m# Development dependencies[m
[32m+[m[32mpytest>=7.0[m
[32m+[m[32mpytest-cov>=4.0[m
[32m+[m[32mblack>=22.0[m
[32m+[m[32mflake8>=5.0[m
[32m+[m[32mmypy>=1.0[m
[32m+[m[32mpython-dotenv>=1.0.0[m
[32m+[m[32mtwine>=4.0.0[m
[32m+[m[32mbuild>=1.0.0[m
[1mdiff --git a/scripts/deploy.py b/scripts/deploy.py[m
[1mnew file mode 100644[m
[1mindex 0000000..11f7914[m
[1m--- /dev/null[m
[1m+++ b/scripts/deploy.py[m
[36m@@ -0,0 +1,128 @@[m
[32m+[m[32m#!/usr/bin/env python3[m
[32m+[m[32m"""[m
[32m+[m[32mQuickInsights Deployment Script[m
[32m+[m[32mBu script API key'leri .env dosyasından okur ve PyPI'ye yükler.[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m[32mimport os[m
[32m+[m[32mimport subprocess[m
[32m+[m[32mimport sys[m
[32m+[m[32mfrom pathlib import Path[m
[32m+[m[32mfrom dotenv import load_dotenv[m
[32m+[m
[32m+[m[32mdef load_environment():[m
[32m+[m[32m    """Load environment variables from .env file"""[m
[32m+[m[32m    env_path = Path('.env')[m
[32m+[m[32m    if env_path.exists():[m
[32m+[m[32m        load_dotenv(env_path)[m
[32m+[m[32m        print("✅ .env dosyası yüklendi")[m
[32m+[m[32m    else:[m
[32m+[m[32m        print("❌ .env dosyası bulunamadı!")[m
[32m+[m[32m        print("Lütfen .env dosyası oluşturun ve API key'leri ekleyin.")[m
[32m+[m[32m        sys.exit(1)[m
[32m+[m
[32m+[m[32mdef check_dependencies():[m
[32m+[m[32m    """Check if required packages are installed"""[m
[32m+[m[32m    try:[m
[32m+[m[32m        import twine[m
[32m+[m[32m        print("✅ twine kurulu")[m
[32m+[m[32m    except ImportError:[m
[32m+[m[32m        print("❌ twine kurulu değil!")[m
[32m+[m[32m        print("Kurulum: pip install twine")[m
[32m+[m[32m        sys.exit(1)[m
[32m+[m
[32m+[m[32mdef build_package():[m
[32m+[m[32m    """Build the package"""[m
[32m+[m[32m    print("🔨 Paket build ediliyor...")[m
[32m+[m[32m    try:[m
[32m+[m[32m        subprocess.run([sys.executable, "-m", "build"], check=True)[m
[32m+[m[32m        print("✅ Paket başarıyla build edildi")[m
[32m+[m[32m    except subprocess.CalledProcessError as e:[m
[32m+[m[32m        print(f"❌ Build hatası: {e}")[m
[32m+[m[32m        sys.exit(1)[m
[32m+[m
[32m+[m[32mdef upload_to_test_pypi():[m
[32m+[m[32m    """Upload to Test PyPI"""[m
[32m+[m[32m    print("🚀 Test PyPI'ye yükleniyor...")[m
[32m+[m[41m    [m
[32m+[m[32m    test_token = os.getenv('TEST_PYPI_TOKEN')[m
[32m+[m[32m    if not test_token:[m
[32m+[m[32m        print("❌ TEST_PYPI_TOKEN bulunamadı!")[m
[32m+[m[32m        return False[m
[32m+[m[41m    [m
[32m+[m[32m    try:[m
[32m+[m[32m        cmd = [[m
[32m+[m[32m            sys.executable, "-m", "twine", "upload",[m
[32m+[m[32m            "--repository", "testpypi",[m
[32m+[m[32m            "dist/*",[m
[32m+[m[32m            "--username", "__token__",[m
[32m+[m[32m            "--password", test_token[m
[32m+[m[32m        ][m
[32m+[m[32m        subprocess.run(cmd, check=True)[m
[32m+[m[32m        print("✅ Test PyPI'ye başarıyla yüklendi!")[m
[32m+[m[32m        return True[m
[32m+[m[32m    except subprocess.CalledProcessError as e:[m
[32m+[m[32m        print(f"❌ Test PyPI yükleme hatası: {e}")[m
[32m+[m[32m        return False[m
[32m+[m
[32m+[m[32mdef upload_to_main_pypi():[m
[32m+[m[32m    """Upload to Main PyPI"""[m
[32m+[m[32m    print("🚀 Ana PyPI'ye yükleniyor...")[m
[32m+[m[41m    [m
[32m+[m[32m    main_token = os.getenv('MAIN_PYPI_TOKEN')[m
[32m+[m[32m    if not main_token:[m
[32m+[m[32m        print("❌ MAIN_PYPI_TOKEN bulunamadı!")[m
[32m+[m[32m        return False[m
[32m+[m[41m    [m
[32m+[m[32m    try:[m
[32m+[m[32m        cmd = [[m
[32m+[m[32m            sys.executable, "-m", "twine", "upload",[m
[32m+[m[32m            "dist/*",[m
[32m+[m[32m            "--username", "__token__",[m
[32m+[m[32m            "--password", main_token[m
[32m+[m[32m        ][m
[32m+[m[32m        subprocess.run(cmd, check=True)[m
[32m+[m[32m        print("✅ Ana PyPI'ye başarıyla yüklendi!")[m
[32m+[m[32m        return True[m
[32m+[m[32m    except subprocess.CalledProcessError as e:[m
[32m+[m[32m        print(f"❌ Ana PyPI yükleme hatası: {e}")[m
[32m+[m[32m        return False[m
[32m+[m
[32m+[m[32mdef main():[m
[32m+[m[32m    """Main deployment function"""[m
[32m+[m[32m    print("🚀 QuickInsights Deployment Script")[m
[32m+[m[32m    print("=" * 50)[m
[32m+[m[41m    [m
[32m+[m[32m    # Load environment[m
[32m+[m[32m    load_environment()[m
[32m+[m[41m    [m
[32m+[m[32m    # Check dependencies[m
[32m+[m[32m    check_dependencies()[m
[32m+[m[41m    [m
[32m+[m[32m    # Build package[m
[32m+[m[32m    build_package()[m
[32m+[m[41m    [m
[32m+[m[32m    # Ask user which repository to upload to[m
[32m+[m[32m    print("\n📋 Hangi repository'ye yüklemek istiyorsunuz?")[m
[32m+[m[32m    print("1. Test PyPI (önerilen)")[m
[32m+[m[32m    print("2. Ana PyPI")[m
[32m+[m[32m    print("3. Her ikisine")[m
[32m+[m[41m    [m
[32m+[m[32m    choice = input("\nSeçiminiz (1-3): ").strip()[m
[32m+[m[41m    [m
[32m+[m[32m    if choice == "1":[m
[32m+[m[32m        upload_to_test_pypi()[m
[32m+[m[32m    elif choice == "2":[m
[32m+[m[32m        upload_to_main_pypi()[m
[32m+[m[32m    elif choice == "3":[m
[32m+[m[32m        upload_to_test_pypi()[m
[32m+[m[32m        if input("\nTest PyPI'de sorun yoksa Ana PyPI'ye devam edelim mi? (y/n): ").lower() == 'y':[m
[32m+[m[32m            upload_to_main_pypi()[m
[32m+[m[32m    else:[m
[32m+[m[32m        print("❌ Geçersiz seçim!")[m
[32m+[m[32m        sys.exit(1)[m
[32m+[m[41m    [m
[32m+[m[32m    print("\n🎉 Deployment tamamlandı!")[m
[32m+[m
[32m+[m[32mif __name__ == "__main__":[m
[32m+[m[32m    main()[m
